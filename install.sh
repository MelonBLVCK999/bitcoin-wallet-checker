#!/bin/bash

# Bitcoin Legacy Wallet Scanner - Installer Script
# Ubuntu/Debian –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   print_error "–ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Ç root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
   print_warning "–°–æ–∑–¥–∞–π—Ç–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ç –Ω–µ–≥–æ"
   exit 1
fi

# Check Ubuntu/Debian
if ! command -v apt &> /dev/null; then
    print_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Ubuntu/Debian"
    exit 1
fi

print_status "üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Bitcoin Legacy Wallet Scanner"
print_status "=========================================="

# Update system
print_status "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
sudo apt update

# Install system dependencies
print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
sudo apt install -y python3 python3-pip python3-venv python3-dev build-essential

# Install Bitcoin Core
print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Bitcoin Core..."
if ! command -v bitcoind &> /dev/null; then
    print_status "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ PPA Bitcoin Core..."
    sudo add-apt-repository -y ppa:bitcoin/bitcoin
    sudo apt update
    sudo apt install -y bitcoind bitcoin-cli
    print_success "Bitcoin Core —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    print_success "Bitcoin Core —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# Create virtual environment
print_status "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è Python..."
python3 -m venv venv
source venv/bin/activate

# Upgrade pip
print_status "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip..."
pip install --upgrade pip

# Install Python dependencies
print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
pip install -r requirements.txt

# Create output directory
print_status "–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
mkdir -p out
chmod 700 out

# Create Bitcoin configuration
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Bitcoin Core..."
mkdir -p ~/.bitcoin

if [ ! -f ~/.bitcoin/bitcoin.conf ]; then
    cat > ~/.bitcoin/bitcoin.conf << EOF
# Bitcoin Core Configuration
# Generated by installer script

# Basic settings
daemon=1
server=1
rpcuser=bitcoin_user
rpcpassword=$(openssl rand -hex 32)
rpcallowip=127.0.0.1
rpcbind=127.0.0.1

# For scanner functionality
txindex=1
blockfilterindex=1

# Network (uncomment one)
# mainnet (default)
# testnet=1
# regtest=1

# Performance
dbcache=450
maxorphantx=10
maxmempool=50
mempoolexpiry=72

# Logging
debug=rpc
logips=1
EOF
    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Bitcoin Core —Å–æ–∑–¥–∞–Ω–∞"
else
    print_warning "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Bitcoin Core —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

# Create systemd service for Bitcoin Core
print_status "–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è Bitcoin Core..."
sudo tee /etc/systemd/system/bitcoind.service > /dev/null << EOF
[Unit]
Description=Bitcoin daemon
After=network.target

[Service]
Type=forking
User=$USER
Group=$USER
ExecStart=/usr/bin/bitcoind -daemon -pid=/run/bitcoind/bitcoind.pid
PIDFile=/run/bitcoind/bitcoind.pid
Restart=on-failure
RestartSec=10

# Make /run/bitcoind
RuntimeDirectory=bitcoind

# Hardening measures
PrivateTmp=true
ProtectSystem=strict
NoNewPrivileges=true
PrivateDevices=true

[Install]
WantedBy=multi-user.target
EOF

# Create runtime directory
sudo mkdir -p /run/bitcoind
sudo chown $USER:$USER /run/bitcoind

# Enable and start Bitcoin Core service
print_status "–ó–∞–ø—É—Å–∫ Bitcoin Core —Å–µ—Ä–≤–∏—Å–∞..."
sudo systemctl daemon-reload
sudo systemctl enable bitcoind
sudo systemctl start bitcoind

# Wait for Bitcoin Core to start
print_status "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Bitcoin Core..."
sleep 5

# Check Bitcoin Core status
if bitcoin-cli getblockchaininfo > /dev/null 2>&1; then
    print_success "Bitcoin Core –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç"
else
    print_warning "Bitcoin Core –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: journalctl -u bitcoind"
fi

# Create desktop shortcut
print_status "–°–æ–∑–¥–∞–Ω–∏–µ —è—Ä–ª—ã–∫–∞ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ..."
cat > ~/Desktop/bitcoin-scanner.desktop << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=Bitcoin Legacy Scanner
Comment=Bitcoin Legacy Wallet Scanner
Exec=$PWD/venv/bin/python3 $PWD/btc_legacy_scanner.py
Icon=terminal
Terminal=true
Categories=Utility;Network;
EOF

chmod +x ~/Desktop/bitcoin-scanner.desktop

# Create launcher script
print_status "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞..."
cat > run_scanner.sh << 'EOF'
#!/bin/bash
# Bitcoin Legacy Scanner Launcher

cd "$(dirname "$0")"
source venv/bin/activate

echo "üöÄ –ó–∞–ø—É—Å–∫ Bitcoin Legacy Scanner..."
echo "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"
echo "üêç Python: $(which python3)"
echo ""

# Check if Bitcoin Core is running
if ! bitcoin-cli getblockchaininfo > /dev/null 2>&1; then
    echo "‚ùå Bitcoin Core –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
    echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo systemctl start bitcoind"
    exit 1
fi

# Check blockchain sync status
SYNC_STATUS=$(bitcoin-cli getblockchaininfo | grep -o '"blocks":[0-9]*' | cut -d: -f2)
SYNC_HEADERS=$(bitcoin-cli getblockchaininfo | grep -o '"headers":[0-9]*' | cut -d: -f2)

if [ "$SYNC_STATUS" != "$SYNC_HEADERS" ]; then
    echo "‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –ë–ª–æ–∫—á–µ–π–Ω –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω"
    echo "   –ë–ª–æ–∫–∏: $SYNC_STATUS / $SYNC_HEADERS"
    echo "   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
    echo ""
fi

echo "‚úÖ Bitcoin Core –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
echo ""

# Run scanner
python3 btc_legacy_scanner.py "$@"
EOF

chmod +x run_scanner.sh

# Create test script
print_status "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞..."
cat > test_scanner.sh << 'EOF'
#!/bin/bash
# Test Bitcoin Legacy Scanner

cd "$(dirname "$0")"
source venv/bin/activate

echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bitcoin Legacy Scanner..."
echo "========================================"

# Test 1: Check dependencies
echo "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
python3 -c "import coincurve; print('‚úÖ coincurve –¥–æ—Å—Ç—É–ø–µ–Ω')" 2>/dev/null || \
python3 -c "import ecdsa; print('‚úÖ ecdsa –¥–æ—Å—Ç—É–ø–µ–Ω')" 2>/dev/null || \
echo "‚ùå –ù–∏ coincurve, –Ω–∏ ecdsa –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã"

# Test 2: Check Bitcoin Core
echo "2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Bitcoin Core..."
if bitcoin-cli getblockchaininfo > /dev/null 2>&1; then
    echo "‚úÖ bitcoin-cli –¥–æ—Å—Ç—É–ø–µ–Ω"
    BLOCKS=$(bitcoin-cli getblockchaininfo | grep -o '"blocks":[0-9]*' | cut -d: -f2)
    echo "   –ë–ª–æ–∫–æ–≤: $BLOCKS"
else
    echo "‚ùå bitcoin-cli –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# Test 3: Performance test
echo "3. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
python3 test_performance.py

echo ""
echo "üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
EOF

chmod +x test_scanner.sh

# Final instructions
print_success "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Bitcoin Core:"
echo "   bitcoin-cli getblockchaininfo"
echo ""
echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫–∞–Ω–µ—Ä:"
echo "   ./run_scanner.sh"
echo ""
echo "3. –ò–ª–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:"
echo "   ./test_scanner.sh"
echo ""
echo "4. –î–ª—è TUI —Ä–µ–∂–∏–º–∞:"
echo "   ./run_scanner.sh"
echo ""
echo "5. –î–ª—è headless —Ä–µ–∂–∏–º–∞:"
echo "   ./run_scanner.sh --headless --start"
echo ""
echo "üìÅ –§–∞–π–ª—ã:"
echo "   - –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç: btc_legacy_scanner.py"
echo "   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: config.yaml"
echo "   - –ó–∞–ø—É—Å–∫: run_scanner.sh"
echo "   - –¢–µ—Å—Ç: test_scanner.sh"
echo "   - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ./out/"
echo ""
echo "‚ö†Ô∏è  –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏!"
echo "   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!"
echo ""
echo "üîó –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README.md"
echo "üìñ –ü–æ–º–æ—â—å: ./run_scanner.sh --help"
