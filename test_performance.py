#!/usr/bin/env python3
"""
Performance test script for Bitcoin Legacy Wallet Scanner
Tests key generation performance without balance checking
"""

import time
import sys
from btc_legacy_scanner import KeyGenerator, BitcoinLegacyScanner

def test_key_generation():
    """Test key generation performance"""
    print("üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π")
    print("=" * 60)
    
    # Test different batch sizes
    batch_sizes = [100, 500, 1000, 2000, 5000]
    
    for batch_size in batch_sizes:
        print(f"\nüì¶ –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: {batch_size}")
        
        generator = KeyGenerator(batch_size)
        
        # Warm up
        for _ in range(3):
            generator.generate_batch()
        
        # Performance test
        start_time = time.time()
        iterations = 10
        
        for i in range(iterations):
            wallets = generator.generate_batch()
            if i % 2 == 0:
                print(f"  –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}/{iterations}: {len(wallets)} –∞–¥—Ä–µ—Å–æ–≤")
        
        end_time = time.time()
        total_time = end_time - start_time
        total_addresses = batch_size * iterations
        
        # Calculate rates
        addresses_per_second = total_addresses / total_time
        addresses_per_minute = addresses_per_second * 60
        
        print(f"  ‚è±Ô∏è  –í—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")
        print(f"  üöÄ –ê–¥—Ä–µ—Å–æ–≤/—Å–µ–∫: {addresses_per_second:,.0f}")
        print(f"  üöÄ –ê–¥—Ä–µ—Å–æ–≤/–º–∏–Ω: {addresses_per_minute:,.0f}")
        print(f"  üìä –í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤: {total_addresses:,}")

def test_scanner_initialization():
    """Test scanner initialization performance"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫–∞–Ω–µ—Ä–∞")
    print("=" * 60)
    
    start_time = time.time()
    
    try:
        scanner = BitcoinLegacyScanner("config.yaml")
        init_time = time.time() - start_time
        
        print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –∑–∞ {init_time:.3f} —Å–µ–∫")
        print(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
        print(f"   - –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: {scanner.config.get('batch_size')}")
        print(f"   - –í–æ—Ä–∫–µ—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {scanner.config.get('gen_workers')}")
        print(f"   - RPC –≤–æ—Ä–∫–µ—Ä—ã: {scanner.config.get('rpc_workers')}")
        print(f"   - –ú–∞–∫—Å–∏–º—É–º –æ—á–µ—Ä–µ–¥–∏: {scanner.config.get('queue_max')}")
        
        # Test dry run mode
        print(f"\nüß™ –¢–µ—Å—Ç dry-run —Ä–µ–∂–∏–º–∞:")
        scanner.start()
        time.sleep(2)  # Let it run for 2 seconds
        scanner.stop()
        
        print(f"‚úÖ Dry-run —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    
    return True

def main():
    """Main test function"""
    print("üöÄ Bitcoin Legacy Wallet Scanner - –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 70)
    
    # Test 1: Key generation
    test_key_generation()
    
    # Test 2: Scanner initialization
    if test_scanner_initialization():
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        sys.exit(1)
    
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    print("1. –£–≤–µ–ª–∏—á—å—Ç–µ batch_size –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ RPC")
    print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ –ø–æ–¥ –≤–∞—à—É —Å–∏—Å—Ç–µ–º—É")
    print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ coincurve –≤–º–µ—Å—Ç–æ ecdsa –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏ CPU")

if __name__ == "__main__":
    main()
