#!/usr/bin/env python3
"""
System Check Script for Bitcoin Legacy Wallet Scanner
Checks all dependencies and system requirements
"""

import sys
import subprocess
import platform
import os
from pathlib import Path

def check_python_version():
    """Check Python version"""
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 10):
        print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.10+, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ {version.major}.{version.minor}.{version.micro}")
        return False
    else:
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
        return True

def check_system():
    """Check operating system"""
    print("\nüíª –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    system = platform.system()
    if system == "Linux":
        distro = "Unknown"
        try:
            with open("/etc/os-release", "r") as f:
                for line in f:
                    if line.startswith("PRETTY_NAME"):
                        distro = line.split("=")[1].strip().strip('"')
                        break
        except:
            pass
        print(f"‚úÖ {system} - {distro}")
        return True
    else:
        print(f"‚ö†Ô∏è  {system} - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è Linux (Ubuntu/Debian)")
        return False

def check_dependencies():
    """Check Python dependencies"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = {
        'coincurve': 'coincurve (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)',
        'ecdsa': 'ecdsa (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ coincurve)',
        'yaml': 'PyYAML',
        'blessed': 'blessed (TUI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞)'
    }
    
    missing_packages = []
    crypto_available = False
    
    for package, description in required_packages.items():
        try:
            if package == 'yaml':
                import yaml
            else:
                __import__(package)
            
            if package in ['coincurve', 'ecdsa']:
                crypto_available = True
                print(f"‚úÖ {description}")
            else:
                print(f"‚úÖ {description}")
                
        except ImportError:
            if package in ['coincurve', 'ecdsa']:
                print(f"‚ö†Ô∏è  {description} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
            else:
                print(f"‚ùå {description} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
                missing_packages.append(package)
    
    if not crypto_available:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–∏ –æ–¥–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install coincurve –∏–ª–∏ pip install ecdsa")
        return False
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install -r requirements.txt")
        return False
    
    return True

def check_bitcoin_core():
    """Check Bitcoin Core installation"""
    print("\n‚Çø –ü—Ä–æ–≤–µ—Ä–∫–∞ Bitcoin Core...")
    
    # Check if bitcoin-cli is available
    try:
        result = subprocess.run(['which', 'bitcoin-cli'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            bitcoin_cli_path = result.stdout.strip()
            print(f"‚úÖ bitcoin-cli –Ω–∞–π–¥–µ–Ω: {bitcoin_cli_path}")
        else:
            print("‚ùå bitcoin-cli –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
            return False
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–∏—Å–∫–µ bitcoin-cli")
        return False
    
    # Check if bitcoind is running
    try:
        result = subprocess.run(['bitcoin-cli', 'getblockchaininfo'], 
                              capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            print("‚úÖ Bitcoin Core –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
            
            # Parse blockchain info
            import json
            try:
                info = json.loads(result.stdout)
                blocks = info.get('blocks', 0)
                headers = info.get('headers', 0)
                verification_progress = info.get('verificationprogress', 0)
                
                print(f"   –ë–ª–æ–∫–∏: {blocks:,}")
                print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers:,}")
                print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {verification_progress:.2%}")
                
                if verification_progress < 0.99:
                    print("   ‚ö†Ô∏è  –ë–ª–æ–∫—á–µ–π–Ω –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    print("      –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                
            except json.JSONDecodeError:
                print("   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç Bitcoin Core")
                
        else:
            print(f"‚ùå Bitcoin Core –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Bitcoin Core")
        return False
    except FileNotFoundError:
        print("‚ùå bitcoin-cli –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    return True

def check_disk_space():
    """Check available disk space"""
    print("\nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ...")
    
    try:
        result = subprocess.run(['df', '-h', '.'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')
            if len(lines) > 1:
                parts = lines[1].split()
                if len(parts) >= 4:
                    available = parts[3]
                    print(f"‚úÖ –°–≤–æ–±–æ–¥–Ω–æ: {available}")
                    
                    # Check if it's GB or TB
                    if 'G' in available:
                        gb = float(available.replace('G', ''))
                        if gb < 10:
                            print("   ‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 10GB —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞")
                    elif 'T' in available:
                        print("   ‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞")
                    else:
                        print("   ‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä –≤—Ä—É—á–Ω—É—é")
                        
        else:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–∫–∞: {e}")
    
    return True

def check_memory():
    """Check available memory"""
    print("\nüß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏...")
    
    try:
        with open('/proc/meminfo', 'r') as f:
            meminfo = f.read()
            
        total_mem = 0
        for line in meminfo.split('\n'):
            if line.startswith('MemTotal:'):
                total_mem = int(line.split()[1]) // 1024  # Convert to MB
                break
        
        if total_mem > 0:
            print(f"‚úÖ –û–±—â–∞—è –ø–∞–º—è—Ç—å: {total_mem:,} MB")
            
            if total_mem < 4096:
                print("   ‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 4GB RAM")
            elif total_mem < 8192:
                print("   ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            else:
                print("   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                
        else:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
    
    return True

def check_output_directory():
    """Check output directory"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
    
    output_dir = Path("./out")
    
    if not output_dir.exists():
        try:
            output_dir.mkdir(exist_ok=True)
            print("‚úÖ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {e}")
            return False
    else:
        print("‚úÖ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # Check permissions
    try:
        if os.access(output_dir, os.W_OK):
            print("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
        else:
            print("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
            return False
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞: {e}")
    
    return True

def main():
    """Main check function"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è Bitcoin Legacy Wallet Scanner")
    print("=" * 60)
    
    checks = [
        check_python_version,
        check_system,
        check_dependencies,
        check_bitcoin_core,
        check_disk_space,
        check_memory,
        check_output_directory
    ]
    
    results = []
    for check in checks:
        try:
            result = check()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            results.append(False)
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò")
    print("=" * 60)
    
    passed = sum(results)
    total = len(results)
    
    if passed == total:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        print("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫–∞–Ω–µ—Ä:")
        print("   python3 btc_legacy_scanner.py")
        print("   –∏–ª–∏")
        print("   ./run_scanner.sh")
        
    else:
        print(f"‚ö†Ô∏è  –ü–†–û–ô–î–ï–ù–û {passed}/{total} –ü–†–û–í–ï–†–û–ö")
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("\nüîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞")
        print("   python3 check_system.py")
        
        if not results[2]:  # dependencies
            print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
            print("   pip install -r requirements.txt")
            
        if not results[3]:  # bitcoin core
            print("\n‚Çø –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Bitcoin Core:")
            print("   ./install.sh")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
